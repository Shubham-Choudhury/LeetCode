// Link: https://leetcode.com/problems/minimize-malware-spread-ii/

#include <iostream>
#include <vector>
#include <unordered_set>
#include <climits>
#include <algorithm>
using namespace std;

class Solution
{
public:
    vector<vector<int>> v;

    int fun(int n, unordered_set<int> &st)
    {

        if (st.count(n))
            return 0;

        st.insert(n);

        int ans = 1;

        for (auto &nn : v[n])
            ans += fun(nn, st);

        return ans;
    }

    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {

        v.resize(301);
        sort(initial.begin(), initial.end());
        for (int i = 0; i < graph.size(); i++)
        {
            for (int j = 0; j < graph[i].size(); j++)
            {
                if (graph[i][j])
                {
                    v[i].push_back(j);
                    v[j].push_back(i);
                }
            }
        }

        int ans = 0, mn = INT_MAX;

        for (int i = 0; i < initial.size(); i++)
        {
            unordered_set<int> st;
            st.insert(initial[i]);
            int temp = 0;

            for (int j = 0; j < initial.size(); j++)
                temp += fun(initial[j], st);

            if (temp < mn)
            {
                mn = temp;
                ans = initial[i];
            }
        }

        return ans;
    }
};

int main()
{
    Solution s;
    vector<vector<int>> graph = {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
    vector<int> initial = {0, 1};
    cout << s.minMalwareSpread(graph, initial) << endl;
    return 0;
}